The equality (==) in JavaScript is used for comparing two variables values , but it ignores the datatype of variable.It attempts to convert and compare operands that are of different types.


1.If the operands have the same type, they are compared as follows:
    .Object: return true only if both operands reference the same object.
    .String: return true only if both operands have the same characters in the same order.
    .Number: return true only if both operands have the same value. +0 and -0 are treated as the same . value. If either operand is NaN, return false; so, NaN is never equal to NaN. +0==-0
    .Boolean: return true only if operands are both true or both false.
    .BigInt: return true only if both operands have the same value.
    .Symbol: return true only if both operands reference the same symbol.
2.If one of the operands is null or undefined, the other must also be null or undefined to return true. Otherwise return false.
3.If one of the operands is an object and the other is a primitive, convert the object to a primitive.
4.At this step, both operands are converted to primitives (one of String, Number, Boolean,Symbol,          and BigInt). The rest of the conversion is done case-by-case.
    .If they are of the same type, compare them using step 1.
    .If one of the operands is a Symbol but the other is not, return false.
    .If one of the operands is a Boolean but the other is not, convert the boolean to a number: true is converted to 1, and false is converted to 0. Then compare the two operands loosely again.
   .Number to String: convert the string to a number. Conversion failure results in NaN, which will     guarantee the equality to be false.
    .Number to BigInt: compare by their numeric value. If the number is Â±Infinity or NaN, return false.
    .String to BigInt: convert the string to a BigInt using the same algorithm as the BigInt() constructor. If conversion fails, return false.

        "1" == 1; // true
        1==1
        1 == "1"; // true
        0 == false; // true
         '0' == false; // true
        0 == null; // false
        0 == undefined; // false
        null == undefined; // true


        const number1 = new Number(3);
        const number2 = new Number(3);
        number1 == 3; // true
        number1 == number2; // false

          [7]==7 //true

        const object1 = {
        key: "value",
        };

        const object2 = {
        key: "value",
        };

        console.log(object1 == object2); // false
        console.log(object1 == object1); // true








	 The strict equality operators === is used for comparing two variables, but this operator also checks datatype and compares two values.

   .

1.If the operands are of different types, return false.
2.If both operands are objects, return true only if they refer to the same object.
3.If both operands are null or both operands are undefined, return true.
4.If either operand is NaN, return false.
5.Otherwise, compare the two operand's values:
6.Numbers must have the same numeric values. +0 and -0 are considered to be the same value.
7.Strings must have the same characters in the same order.
8.Booleans must be both true or both false.

                "hello" === "hello"; // true
                "hello" === "hola"; // false

                3 === 3; // true
                3 === 4; // false

                true === true; // true
                true === false; // false

                null === null; // true


                "3" === 3; // false
                true === 1; // false
                null === undefined; // false
                3 === new Number(3); // false


                    const object1 = {
                    key: "value",
                    };

                    const object2 = {
                    key: "value",
                    };

                    console.log(object1 === object2); // false
                    console.log(object1 === object1); // true







                    0 == false   // true
                    0 === false  // false
                    1 == "1"     // true
                    1 === "1"    // false
                    [7]==7 //true
                    [7]===7 // false
                    '0' == false // true
                    '0' === false // false
                    []==[] or []===[] //false, refer different objects in memory
                    {}=={} or {}==={} //false, refer different objects in memory
                    null==undefined //true null===undefined //true
                    null==0 //false     null===0 //false

                 const object1 = {
                    key: "value",
                    };

                    const object2 = {
                    key: "value",
                    };

                    console.log(object1 === object2); // false
                    console.log(object1 === object1); // true
                     console.log(object1 == object2); // false
                    console.log(object1 == object1); // true



